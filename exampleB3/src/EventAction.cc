// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
#include "EventAction.hh"
#include "RunAction.hh"

#include "G4RunManager.hh"
#include "G4Event.hh"

#include "G4SDManager.hh"
#include "G4HCofThisEvent.hh"
#include "G4THitsMap.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"

namespace B3a
{
EventAction::EventAction(RunAction* runAction) : fRunAction(runAction)
{

}

void EventAction::BeginOfEventAction(const G4Event* /*evt*/)
{ 

}

void EventAction::EndOfEventAction(const G4Event* current_event )
{
  // Hits collections of this current event.
  // The hit collections generated by a sensitive detector are collected in class object
  // the data member.  The current event has a pointer to the generated hit collection.
  G4HCofThisEvent* hit_collection_event = current_event->GetHCofThisEvent();
  if(!hit_collection_event) 
    return;

  // Get hits collections IDs
  // This id is set to G4Int of -1 in the event action header file.
  if (fCollID_cryst < 0) 
  {
      // The singlton for the G4 Sensitive Dectctor manager.
      G4SDManager* SDMan = G4SDManager::GetSDMpointer();
      fCollID_cryst   = SDMan->GetCollectionID("crystal/edep");
      fCollID_patient = SDMan->GetCollectionID("patient/dose");
  }

  //Energy in crystals : identify 'good events'
  const G4double eThreshold = 500*keV;
  G4int number_of_fired = 0;

  auto event_map = (G4THitsMap<G4double>*)(hit_collection_event->GetHC(fCollID_cryst));

  std::map<G4int,G4double*>::iterator itr;
  for (itr = event_map->GetMap()->begin(); itr != event_map->GetMap()->end(); itr++) 
  {
      G4int copyNb  = (itr->first);
      G4double edep = *(itr->second);
      if (edep > eThreshold) 
         number_of_fired++;
      
      G4cout << "\n  cryst " << copyNb << ": " << edep/keV << " keV "  << G4endl ;
  }
  
  if (number_of_fired == 2) 
    fRunAction->CountEvent();

  //Dose deposit in patient
  G4double dose = 0.0;

  event_map = (G4THitsMap<G4double>*)(hit_collection_event->GetHC(fCollID_patient));

  for (itr = event_map->GetMap()->begin(); itr != event_map->GetMap()->end(); itr++) 
  {
      G4int copyNb  = (itr->first);
      dose = *(itr->second);
      G4cout << "\n  Patient " << copyNb << ": " << dose/keV << " keV "  << G4endl ;
  }
  
  if (dose > 0.0) 
    fRunAction->SumDose(dose);
}

}

